import requests
import telegram
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, JobQueue
from datetime import datetime
import warnings
import threading
from flask import Flask, jsonify
import pytz
from binance.client import Client  # Th√™m python-binance

warnings.filterwarnings("ignore", category=UserWarning)

# Binance Futures API (public)
BINANCE_FUTURES_API = "https://fapi.binance.com/fapi/v1/ticker/price"
BINANCE_24H_API = "https://fapi.binance.com/fapi/v1/ticker/24hr"

# Binance API Key v√† Secret (c·∫ßn thay b·∫±ng c·ªßa b·∫°n)
BINANCE_API_KEY = "PTJ7sV7LzIzyOnoq3eAZcWCH20XGGX0Vyr77eddIYaWdG0bxGotZQw51ZIQOutKW"
BINANCE_API_SECRET = "rGagN1zhh6zmXmbRWYYQYomg7WHQxfLDF0urQn0ink8biKO06xnISg1eiRIIfagy"

# Telegram config
TELEGRAM_TOKEN = "7528038148:AAFaLLQkc5EXgFLvXDHSSGFVcn1UYYOw8Tw"

# Flask app
app = Flask(__name__)

# Dictionary ƒë·ªÉ l∆∞u job theo chat_id v√† coin ho·∫∑c ch·ª©c nƒÉng
active_jobs = {}  # Format: {(chat_id, coin ho·∫∑c "pnl"): job_object}

# Kh·ªüi t·∫°o Binance client
binance_client = Client(BINANCE_API_KEY, BINANCE_API_SECRET)


# L·∫•y gi√° futures hi·ªán t·∫°i
def get_futures_price(coin_symbol):
    try:
        symbol = f"{coin_symbol.upper()}USDT"
        response = requests.get(BINANCE_FUTURES_API, params={"symbol": symbol})
        data = response.json()
        return float(data["price"])
    except Exception:
        return None


# L·∫•y bi·∫øn ƒë·ªông 1h (∆∞·ªõc l∆∞·ª£ng t·ª´ 24h API)
def get_price_change_1h(coin_symbol):
    try:
        symbol = f"{coin_symbol.upper()}USDT"
        response = requests.get(BINANCE_24H_API, params={"symbol": symbol})
        data = response.json()

        current_price = float(data["lastPrice"])
        high_price_24h = float(data["highPrice"])
        low_price_24h = float(data["lowPrice"])

        avg_price_24h = (high_price_24h + low_price_24h) / 2
        change_1h = ((current_price - avg_price_24h) / avg_price_24h) * 100 * 24
        return change_1h
    except Exception:
        return None


# Ch·ªçn 1 icon cho m·ªói m·ª©c thay ƒë·ªïi
def get_change_icon(percentage):
    if percentage >= 50:
        return "üå©Ô∏è"  # TƒÉng c·ª±c m·∫°nh
    elif percentage >= 10:
        return "üåû"  # TƒÉng m·∫°nh
    elif percentage > 0:
        return "üå±"  # TƒÉng nh·∫π
    elif percentage <= -50:
        return "üí£"  # Gi·∫£m c·ª±c m·∫°nh
    elif percentage <= -10:
        return "‚òî"  # Gi·∫£m m·∫°nh
    elif percentage < 0:
        return "üçÇ"  # Gi·∫£m nh·∫π
    else:
        return "üåó"  # Kh√¥ng ƒë·ªïi


# H√†m g·ª≠i gi√° t·ª± ƒë·ªông m·ªói 3 ph√∫t, th√™m ng√†y gi·ªù
def auto_price(context):
    job = context.job
    chat_id = job.context["chat_id"]
    coin = job.context["coin"]

    current_price = get_futures_price(coin)
    current_time = datetime.now(pytz.timezone("Asia/Ho_Chi_Minh")).strftime(
        "%Y-%m-%d %H:%M:%S"
    )

    if current_price is not None:
        change_1h = get_price_change_1h(coin)
        reply = f"üìÖ **{current_time}**\nGi√° {coin}/USDT: **${current_price}**\n"
    else:
        reply = f"üìÖ **{current_time}**\nKh√¥ng l·∫•y ƒë∆∞·ª£c gi√° {coin}, ki·ªÉm tra l·∫°i bro!"

    context.bot.send_message(chat_id=chat_id, text=reply, parse_mode="Markdown")


# H√†m l·∫•y PNL c·ªßa c√°c v·ªã th·∫ø ƒëang m·ªü
def get_pnl():
    try:
        positions = binance_client.futures_position_information()
        open_positions = [pos for pos in positions if float(pos["positionAmt"]) != 0]

        if not open_positions:
            return "Hi·ªán t·∫°i kh√¥ng c√≥ v·ªã th·∫ø n√†o ƒëang m·ªü bro!"

        reply = "üìä **PNL c√°c v·ªã th·∫ø ƒëang m·ªü**:\n"
        for pos in open_positions:
            symbol = pos["symbol"]
            unrealized_pnl = float(pos["unRealizedProfit"])
            entry_price = float(pos["entryPrice"])
            position_amt = float(pos["positionAmt"])
            leverage = int(pos["leverage"])
            reply += (
                f"- {symbol}: **{unrealized_pnl:.2f} USDT** "
                f"(Entry: {entry_price}, S·ªë l∆∞·ª£ng: {position_amt}, ƒê√≤n b·∫©y: {leverage}x)\n"
            )
        return reply
    except Exception as e:
        return f"L·ªói khi l·∫•y PNL: {str(e)}"


# H√†m g·ª≠i PNL t·ª± ƒë·ªông m·ªói 3 ph√∫t
def auto_pnl(context):
    job = context.job
    chat_id = job.context["chat_id"]
    current_time = datetime.now(pytz.timezone("Asia/Ho_Chi_Minh")).strftime(
        "%Y-%m-%d %H:%M:%S"
    )
    pnl_info = get_pnl()
    context.bot.send_message(
        chat_id=chat_id,
        text=f"üìÖ **{current_time}**\n{pnl_info}",
        parse_mode="Markdown",
    )


# Command /start
def start(update, context):
    update.message.reply_text(
        "Yo bro! G·ª≠i tao t√™n coin (ETH, SOL, DOGE) ƒë·ªÉ xem gi√°, ho·∫∑c d√πng /auto <coin> ƒë·ªÉ nh·∫≠n gi√° m·ªói 3 ph√∫t! "
        "D√πng /pnl ƒë·ªÉ xem PNL, /cancel <coin ho·∫∑c pnl> ƒë·ªÉ h·ªßy."
    )


# Command /auto
def auto(update, context):
    if len(context.args) != 1:
        update.message.reply_text("D√πng: /auto <coin>, v√≠ d·ª• /auto ETH")
        return

    coin = context.args[0].upper()
    chat_id = update.message.chat_id

    if get_futures_price(coin) is None:
        update.message.reply_text(
            f"Coin {coin} kh√¥ng h·ª£p l·ªá ho·∫∑c l·ªói API, th·ª≠ l·∫°i bro!"
        )
        return

    job_key = (chat_id, coin)
    if job_key in active_jobs:
        update.message.reply_text(f"ƒê√£ c√≥ auto cho {coin} r·ªìi bro, chill th√¥i!")
        return

    job = context.job_queue.run_repeating(
        auto_price, interval=180, first=0, context={"chat_id": chat_id, "coin": coin}
    )
    active_jobs[job_key] = job
    update.message.reply_text(f"ƒê√£ set auto gi√° {coin} m·ªói 3 ph√∫t, chill ƒëi bro!")


# Command /pnl
def pnl(update, context):
    chat_id = update.message.chat_id
    job_key = (chat_id, "pnl")

    if job_key in active_jobs:
        update.message.reply_text("ƒê√£ set auto PNL r·ªìi bro, chill ƒëi!")
        return

    pnl_info = get_pnl()
    update.message.reply_text(pnl_info, parse_mode="Markdown")

    job = context.job_queue.run_repeating(
        auto_pnl, interval=180, first=0, context={"chat_id": chat_id}
    )
    active_jobs[job_key] = job
    update.message.reply_text("ƒê√£ set auto PNL m·ªói 3 ph√∫t, chill ƒëi bro!")


# Command /cancel
def cancel(update, context):
    if len(context.args) != 1:
        update.message.reply_text(
            "D√πng: /cancel <coin ho·∫∑c pnl>, v√≠ d·ª• /cancel ETH ho·∫∑c /cancel pnl"
        )
        return

    target = context.args[0].upper() if context.args[0].lower() != "pnl" else "pnl"
    chat_id = update.message.chat_id
    job_key = (chat_id, target)

    if job_key in active_jobs:
        job = active_jobs[job_key]
        job.schedule_removal()
        del active_jobs[job_key]
        update.message.reply_text(f"ƒê√£ h·ªßy auto {target}, ngh·ªâ ng∆°i ch√∫t ƒëi bro!")
    else:
        update.message.reply_text(
            f"Ch∆∞a set auto cho {target} m√† bro, th·ª≠ /auto ho·∫∑c /pnl tr∆∞·ªõc ƒëi!"
        )


# X·ª≠ l√Ω tin nh·∫Øn th∆∞·ªùng
def handle_message(update, context):
    coin = update.message.text.strip().upper()
    current_price = get_futures_price(coin)

    if current_price is not None:
        change_1h = get_price_change_1h(coin)
        reply = f"Gi√° {coin}/USDT: **${current_price}**\n"
    else:
        update.message.reply_text(
            f"Kh√¥ng t√¨m th·∫•y coin {coin} ho·∫∑c l·ªói API, th·ª≠ l·∫°i bro!"
        )
    update.message.reply_text(reply, parse_mode="Markdown")


# H√†m ch·∫°y Telegram bot
def run_bot():
    updater = Updater(TELEGRAM_TOKEN, use_context=True)
    dp = updater.dispatcher
    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(CommandHandler("auto", auto))
    dp.add_handler(CommandHandler("cancel", cancel))
    dp.add_handler(CommandHandler("pnl", pnl))  # Th√™m handler cho /pnl
    dp.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_message))
    updater.start_polling()
    updater.idle()


# Flask endpoint
@app.route("/")
def home():
    return jsonify(
        {"message": "Bot is running!", "timestamp": datetime.now().isoformat()}
    )


@app.route("/price/<coin>")
def get_price(coin):
    current_price = get_futures_price(coin)
    if current_price is not None:
        change_1h = get_price_change_1h(coin)
        return jsonify(
            {
                "coin": coin.upper(),
                "price": current_price,
                "change_1h": change_1h if change_1h is not None else "Error",
            }
        )
    return jsonify({"error": f"Could not fetch price for {coin}"}), 400


# Main
if __name__ == "__main__":
    bot_thread = threading.Thread(target=run_bot)
    bot_thread.daemon = True
    bot_thread.start()
    app.run(host="0.0.0.0", port=5000)
