import requests
import telegram
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, JobQueue
from datetime import datetime
import warnings

warnings.filterwarnings("ignore", category=UserWarning)

# Binance Futures API
BINANCE_FUTURES_API = "https://fapi.binance.com/fapi/v1/ticker/price"
BINANCE_24H_API = "https://fapi.binance.com/fapi/v1/ticker/24hr"

# Telegram config
TELEGRAM_TOKEN = "7528038148:AAFaLLQkc5EXgFLvXDHSSGFVcn1UYYOw8Tw"


# L·∫•y gi√° futures hi·ªán t·∫°i
def get_futures_price(coin_symbol):
    try:
        symbol = f"{coin_symbol.upper()}USDT"
        response = requests.get(BINANCE_FUTURES_API, params={"symbol": symbol})
        data = response.json()
        return float(data["price"])
    except Exception:
        return None


# L·∫•y bi·∫øn ƒë·ªông 1h (∆∞·ªõc l∆∞·ª£ng t·ª´ 24h API)
def get_price_change_1h(coin_symbol):
    try:
        symbol = f"{coin_symbol.upper()}USDT"
        response = requests.get(BINANCE_24H_API, params={"symbol": symbol})
        data = response.json()

        current_price = float(data["lastPrice"])
        high_price_24h = float(data["highPrice"])
        low_price_24h = float(data["lowPrice"])

        avg_price_24h = (high_price_24h + low_price_24h) / 2
        change_1h = ((current_price - avg_price_24h) / avg_price_24h) * 100 * 24
        return change_1h
    except Exception:
        return None


# Ch·ªçn 1 icon cho m·ªói m·ª©c thay ƒë·ªïi
def get_change_icon(percentage):
    if percentage >= 50:
        return "üå©Ô∏è"  # TƒÉng c·ª±c m·∫°nh
    elif percentage >= 10:
        return "üåû"  # TƒÉng m·∫°nh
    elif percentage > 0:
        return "üå±"  # TƒÉng nh·∫π
    elif percentage <= -50:
        return "üí£"  # Gi·∫£m c·ª±c m·∫°nh
    elif percentage <= -10:
        return "‚òî"  # Gi·∫£m m·∫°nh
    elif percentage < 0:
        return "üçÇ"  # Gi·∫£m nh·∫π
    else:
        return "üåó"  # Kh√¥ng ƒë·ªïi


# H√†m g·ª≠i gi√° t·ª± ƒë·ªông m·ªói 1h
def auto_price(context):
    job = context.job
    chat_id = job.context["chat_id"]
    coin = job.context["coin"]

    current_price = get_futures_price(coin)
    if current_price is not None:
        change_1h = get_price_change_1h(coin)
        reply = f"Gi√° {coin}/USDT: **${current_price:.2f}**\n"
        reply += (
            f"Bi·∫øn ƒë·ªông trong 1h {get_change_icon(change_1h)}: **{change_1h:.2f}%**"
            if change_1h is not None
            else "Bi·∫øn ƒë·ªông trong 1h ‚ö†Ô∏è: L·ªói"
        )
    else:
        reply = f"Kh√¥ng l·∫•y ƒë∆∞·ª£c gi√° {coin}, ki·ªÉm tra l·∫°i bro!"

    context.bot.send_message(chat_id=chat_id, text=reply, parse_mode="Markdown")


# Command /start
def start(update, context):
    update.message.reply_text(
        "Yo bro! G·ª≠i tao t√™n coin (ETH, SOL, DOGE) ƒë·ªÉ xem gi√°, ho·∫∑c d√πng /auto <coin> ƒë·ªÉ nh·∫≠n gi√° m·ªói 1h!"
    )


# Command /auto
def auto(update, context):
    if len(context.args) != 1:
        update.message.reply_text("D√πng: /auto <coin>, v√≠ d·ª• /auto ETH")
        return

    coin = context.args[0].upper()
    chat_id = update.message.chat_id

    if get_futures_price(coin) is None:
        update.message.reply_text(
            f"Coin {coin} kh√¥ng h·ª£p l·ªá ho·∫∑c l·ªói API, th·ª≠ l·∫°i bro!"
        )
        return

    context.job_queue.run_repeating(
        auto_price, interval=3600, first=0, context={"chat_id": chat_id, "coin": coin}
    )
    update.message.reply_text(f"ƒê√£ set auto gi√° {coin} m·ªói 1h, chill ƒëi bro!")


# X·ª≠ l√Ω tin nh·∫Øn th∆∞·ªùng
def handle_message(update, context):
    coin = update.message.text.strip().upper()
    current_price = get_futures_price(coin)

    if current_price is not None:
        change_1h = get_price_change_1h(coin)
        reply = f"Gi√° {coin}/USDT: **${current_price:.2f}**\n"
        reply += (
            f"Bi·∫øn ƒë·ªông trong 1h {get_change_icon(change_1h)}: **{change_1h:.2f}%**"
            if change_1h is not None
            else "Bi·∫øn ƒë·ªông trong 1h ‚ö†Ô∏è: L·ªói"
        )
        update.message.reply_text(reply, parse_mode="Markdown")
    else:
        update.message.reply_text(
            f"Kh√¥ng t√¨m th·∫•y coin {coin} ho·∫∑c l·ªói API, th·ª≠ l·∫°i bro!"
        )


# Main
def main():
    updater = Updater(TELEGRAM_TOKEN, use_context=True)
    dp = updater.dispatcher
    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(CommandHandler("auto", auto))
    dp.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_message))
    updater.start_polling()
    updater.idle()


if __name__ == "__main__":
    main()
